#import "../conf.typ": *
= О теории сложности

#note[
  Задача кодируется множеством строк в некотором конечном алфавите $Sigma, abs(Sigma) >= 2$. Без ограничения общности, будем рассматривать только $Sigma = {0, 1} = BB$.
]

#definition[
  $Sigma^*$ -- множество всех слов в алфавите $Sigma$, то есть $Sigma^* = union_(n = 0)^oo Sigma^n$.
]

#definition[
  *Язык* -- некоторое множество слов, то есть подмножество в $Sigma^*$.
]

#definition[
  Модель вычислений, которую мы будем использовать в дальнейшем -- *машина Тьюринга*
  #eq[
    $M = (Q, q_0, q_f, Sigma, b, sigma)$
  ]
  где:
  - $Q$ -- множество состояний (конечное, непустое)
  - $q_0, q_f in Q$ -- выделенные состояния: начальнео и конечное
  - $Sigma$ -- конечный алфавит
  - $b$ -- специальный "пустой символ"
  - $sigma: Sigma times Q -> Sigma times Q times {-1, 0, 1}$ -- функция перехода (частично определённая, в общем случае многозначная)
]

#definition[
  С машиной Тьюринга M связаны отображения:
  - *Вычисляемая машиной функция* $M(dot): BB^* -> B^* union {bot}$, где $M(w)$ -- выход машины М, если на вход подана строка $w$. (Выдаёт $bot$ если вычисление не закончено)
  - *Время её работы* $T_M (dot): BB^* -> NN union {oo}$, где $T_M (w)$ -- число тактов работы машины М при вычислении на входе $w$.
  - *Используемая ею память* $S_M (dot): BB^* -> NN union {oo}$, где $S_M (w)$ -- число ячеек ленты, задействованных в вычислении на входе $w$.
]

#definition[
  Введём $poly(x)$ -- обозначение для "*некоторого полинома*" от переменной $x$. Важен не сам полином, факт его существования.
]

#definition[
  Введём названия для некоторых видов машин Тьюринга:
  - *Детерминированная машина Тьюринга* -- функция перехода $sigma$ однозначна
  - *Полиномиальная (детерминированная) машина Тьюринга M* -- обладает свойством:
  #eq[
    $forall w in BB^*: T_M (w) <= poly(abs(w))$
  ]
  - *Недетерминированная машина Тьюринга* -- функция перехода $sigma$, вообще говоря, многозначна, выбор её значений в конкретном вычислении осуществляется с помощью строки "Недетерминированного выбора" $psi in BB^oo$, записанной на специальную ленту
  - *Полиномиальная недетерминированная машина Тьюринга М* -- обладает свойством:
  #eq[
    $forall w in BB^* : forall psi in BB^* : T_M (psi; w) <= poly(abs(w))$
  ]
  - *Вероятностная машина Тьюринга* -- функция перехода $sigma$ принимает случайные значения, $M(w)$ -- случайная величина (при фиксированном $w$). Выбор значения функции перехода в каждом такте осуществляется с помощью случайной строки $rho in BB^oo$, записанной на специальную ленту.
  - *Полиномиальная вероятностная машина Тьюринга (п.в.м.Т.) М* -- обладает свойством:
  #eq[
    $forall w in BB^* : forall rho in BB^oo : T_M (rho; w) <= poly(abs(w))$
  ]
  - *Полиномиальная в среднем вероятностная машина Тьюринга M* -- обладает свойством:
  #eq[
    $exists epsilon > 0 : forall n in NN : forall rho in BB^oo : forall w in BB^n : EE (T_M (rho; w))^epsilon <= n$
  ]
]

#definition[
  Класс сложностей *Bounded-error Probabilistic Polynomial time*:
  #eq[
    $"BPP" = {
        L subset.eq BB^* | exists "п.в.м.Т." M
        cases(
      w in L &=> mu({M(w) = 1}) >= 2/3,
      w in.not in L &=> mu({M(w) = 1}) <= 1/3)
      }$
  ]
]

#definition[
  Класс сложностей *Randomzed Polynomial time*:
  #eq[
    $"RP" = {
        L subset.eq | exists "п.в.м.Т." М cases(
      w in L &=> mu({M(w) = 1}) >= 2/3,
      w in.not in L &=> mu({M(w) = 1}) = 0)
      }
      }$
  ]
]

#definition[
  *Однородной моделью вычислителя противника* называется полиномиальная вероятностная машина Тьюринга или полиномальная в среднем вероятностная машина Тьюринга.
]

#definition[
  *Булевой схемой* называется отображение $C: BB^n -> BB^m$, такое, что для каждой координаты образа существует логическая функция от входа, тождественно задающая её.

  *Размером булевой схемы* называется размерность её выхода.
]

#example[
  Булевая схема $C : BB^1 -> BB^3$ имеет размер 3:
  #eq[
    $C(x_1) = (x_1, not x_1, x_1 or not x_1)$
  ]
]

#definition[
  *Неоднородной моделью вычислителя противника* называется семейство булевых схем полиномиального размера $C = {C_n}_(n = 1)^oo$:
  #eq[
    $forall n : abs(C_n) <= poly(n)$
  ]
  причём для каждого размера входа $abs(w)$ выбирается $C_abs(w)$ схема.
]


